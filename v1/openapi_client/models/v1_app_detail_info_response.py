# coding: utf-8

"""
    app-server

    Resource for managing app-server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: huangrh@goodrain.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1AppDetailInfoResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'advantage': 'str',
        'app_classification_id': 'str',
        'app_detail_url': 'str',
        'app_key_id': 'str',
        'approve_status': 'str',
        'attachments': 'list[ModelsAppAttachment]',
        'create_time': 'datetime',
        'creator': 'str',
        'desc': 'str',
        'dev_status': 'str',
        'download_count': 'int',
        'entrance': 'str',
        'install_count': 'int',
        'introduction': 'str',
        'introduction_html': 'str',
        'is_official': 'bool',
        'logo': 'str',
        'market_id': 'str',
        'market_name': 'str',
        'market_url': 'str',
        'name': 'str',
        'org_id': 'str',
        'org_name': 'str',
        'publish_type': 'str',
        'scenario': 'str',
        'show_count': 'int',
        'start_count': 'int',
        'status': 'str',
        'tags': 'list[str]',
        'up_shelves_time': 'datetime',
        'update_time': 'datetime',
        'user': 'V1SaaSAppUser',
        'versions': 'list[V1AppVersionBase]'
    }

    attribute_map = {
        'advantage': 'advantage',
        'app_classification_id': 'appClassificationID',
        'app_detail_url': 'appDetailURL',
        'app_key_id': 'appKeyID',
        'approve_status': 'approveStatus',
        'attachments': 'attachments',
        'create_time': 'createTime',
        'creator': 'creator',
        'desc': 'desc',
        'dev_status': 'devStatus',
        'download_count': 'downloadCount',
        'entrance': 'entrance',
        'install_count': 'installCount',
        'introduction': 'introduction',
        'introduction_html': 'introductionHTML',
        'is_official': 'isOfficial',
        'logo': 'logo',
        'market_id': 'marketID',
        'market_name': 'marketName',
        'market_url': 'marketURL',
        'name': 'name',
        'org_id': 'orgID',
        'org_name': 'orgName',
        'publish_type': 'publishType',
        'scenario': 'scenario',
        'show_count': 'showCount',
        'start_count': 'startCount',
        'status': 'status',
        'tags': 'tags',
        'up_shelves_time': 'upShelvesTime',
        'update_time': 'updateTime',
        'user': 'user',
        'versions': 'versions'
    }

    def __init__(self, advantage=None, app_classification_id=None, app_detail_url=None, app_key_id=None, approve_status=None, attachments=None, create_time=None, creator=None, desc=None, dev_status=None, download_count=None, entrance=None, install_count=None, introduction=None, introduction_html=None, is_official=None, logo=None, market_id=None, market_name=None, market_url=None, name=None, org_id=None, org_name=None, publish_type=None, scenario=None, show_count=None, start_count=None, status=None, tags=None, up_shelves_time=None, update_time=None, user=None, versions=None, local_vars_configuration=None):  # noqa: E501
        """V1AppDetailInfoResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._advantage = None
        self._app_classification_id = None
        self._app_detail_url = None
        self._app_key_id = None
        self._approve_status = None
        self._attachments = None
        self._create_time = None
        self._creator = None
        self._desc = None
        self._dev_status = None
        self._download_count = None
        self._entrance = None
        self._install_count = None
        self._introduction = None
        self._introduction_html = None
        self._is_official = None
        self._logo = None
        self._market_id = None
        self._market_name = None
        self._market_url = None
        self._name = None
        self._org_id = None
        self._org_name = None
        self._publish_type = None
        self._scenario = None
        self._show_count = None
        self._start_count = None
        self._status = None
        self._tags = None
        self._up_shelves_time = None
        self._update_time = None
        self._user = None
        self._versions = None
        self.discriminator = None

        self.advantage = advantage
        self.app_classification_id = app_classification_id
        self.app_detail_url = app_detail_url
        self.app_key_id = app_key_id
        self.approve_status = approve_status
        self.attachments = attachments
        self.create_time = create_time
        self.creator = creator
        self.desc = desc
        self.dev_status = dev_status
        self.download_count = download_count
        self.entrance = entrance
        self.install_count = install_count
        self.introduction = introduction
        self.introduction_html = introduction_html
        self.is_official = is_official
        self.logo = logo
        self.market_id = market_id
        self.market_name = market_name
        self.market_url = market_url
        self.name = name
        self.org_id = org_id
        self.org_name = org_name
        self.publish_type = publish_type
        self.scenario = scenario
        self.show_count = show_count
        self.start_count = start_count
        self.status = status
        self.tags = tags
        self.up_shelves_time = up_shelves_time
        self.update_time = update_time
        self.user = user
        self.versions = versions

    @property
    def advantage(self):
        """Gets the advantage of this V1AppDetailInfoResponse.  # noqa: E501

        产品优势  # noqa: E501

        :return: The advantage of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._advantage

    @advantage.setter
    def advantage(self, advantage):
        """Sets the advantage of this V1AppDetailInfoResponse.

        产品优势  # noqa: E501

        :param advantage: The advantage of this V1AppDetailInfoResponse.  # noqa: E501
        :type advantage: str
        """
        if self.local_vars_configuration.client_side_validation and advantage is None:  # noqa: E501
            raise ValueError("Invalid value for `advantage`, must not be `None`")  # noqa: E501

        self._advantage = advantage

    @property
    def app_classification_id(self):
        """Gets the app_classification_id of this V1AppDetailInfoResponse.  # noqa: E501

        类别 ID  # noqa: E501

        :return: The app_classification_id of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_classification_id

    @app_classification_id.setter
    def app_classification_id(self, app_classification_id):
        """Sets the app_classification_id of this V1AppDetailInfoResponse.

        类别 ID  # noqa: E501

        :param app_classification_id: The app_classification_id of this V1AppDetailInfoResponse.  # noqa: E501
        :type app_classification_id: str
        """
        if self.local_vars_configuration.client_side_validation and app_classification_id is None:  # noqa: E501
            raise ValueError("Invalid value for `app_classification_id`, must not be `None`")  # noqa: E501

        self._app_classification_id = app_classification_id

    @property
    def app_detail_url(self):
        """Gets the app_detail_url of this V1AppDetailInfoResponse.  # noqa: E501

        应用详情 URL  # noqa: E501

        :return: The app_detail_url of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_detail_url

    @app_detail_url.setter
    def app_detail_url(self, app_detail_url):
        """Sets the app_detail_url of this V1AppDetailInfoResponse.

        应用详情 URL  # noqa: E501

        :param app_detail_url: The app_detail_url of this V1AppDetailInfoResponse.  # noqa: E501
        :type app_detail_url: str
        """
        if self.local_vars_configuration.client_side_validation and app_detail_url is None:  # noqa: E501
            raise ValueError("Invalid value for `app_detail_url`, must not be `None`")  # noqa: E501

        self._app_detail_url = app_detail_url

    @property
    def app_key_id(self):
        """Gets the app_key_id of this V1AppDetailInfoResponse.  # noqa: E501

        应用 ID  # noqa: E501

        :return: The app_key_id of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_key_id

    @app_key_id.setter
    def app_key_id(self, app_key_id):
        """Sets the app_key_id of this V1AppDetailInfoResponse.

        应用 ID  # noqa: E501

        :param app_key_id: The app_key_id of this V1AppDetailInfoResponse.  # noqa: E501
        :type app_key_id: str
        """
        if self.local_vars_configuration.client_side_validation and app_key_id is None:  # noqa: E501
            raise ValueError("Invalid value for `app_key_id`, must not be `None`")  # noqa: E501

        self._app_key_id = app_key_id

    @property
    def approve_status(self):
        """Gets the approve_status of this V1AppDetailInfoResponse.  # noqa: E501

        应用审批状态  # noqa: E501

        :return: The approve_status of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._approve_status

    @approve_status.setter
    def approve_status(self, approve_status):
        """Sets the approve_status of this V1AppDetailInfoResponse.

        应用审批状态  # noqa: E501

        :param approve_status: The approve_status of this V1AppDetailInfoResponse.  # noqa: E501
        :type approve_status: str
        """
        if self.local_vars_configuration.client_side_validation and approve_status is None:  # noqa: E501
            raise ValueError("Invalid value for `approve_status`, must not be `None`")  # noqa: E501

        self._approve_status = approve_status

    @property
    def attachments(self):
        """Gets the attachments of this V1AppDetailInfoResponse.  # noqa: E501

        附件  # noqa: E501

        :return: The attachments of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: list[ModelsAppAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this V1AppDetailInfoResponse.

        附件  # noqa: E501

        :param attachments: The attachments of this V1AppDetailInfoResponse.  # noqa: E501
        :type attachments: list[ModelsAppAttachment]
        """
        if self.local_vars_configuration.client_side_validation and attachments is None:  # noqa: E501
            raise ValueError("Invalid value for `attachments`, must not be `None`")  # noqa: E501

        self._attachments = attachments

    @property
    def create_time(self):
        """Gets the create_time of this V1AppDetailInfoResponse.  # noqa: E501

        创建时间  # noqa: E501

        :return: The create_time of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1AppDetailInfoResponse.

        创建时间  # noqa: E501

        :param create_time: The create_time of this V1AppDetailInfoResponse.  # noqa: E501
        :type create_time: datetime
        """
        if self.local_vars_configuration.client_side_validation and create_time is None:  # noqa: E501
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def creator(self):
        """Gets the creator of this V1AppDetailInfoResponse.  # noqa: E501

        创建人  # noqa: E501

        :return: The creator of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this V1AppDetailInfoResponse.

        创建人  # noqa: E501

        :param creator: The creator of this V1AppDetailInfoResponse.  # noqa: E501
        :type creator: str
        """
        if self.local_vars_configuration.client_side_validation and creator is None:  # noqa: E501
            raise ValueError("Invalid value for `creator`, must not be `None`")  # noqa: E501

        self._creator = creator

    @property
    def desc(self):
        """Gets the desc of this V1AppDetailInfoResponse.  # noqa: E501

        产品概述  # noqa: E501

        :return: The desc of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this V1AppDetailInfoResponse.

        产品概述  # noqa: E501

        :param desc: The desc of this V1AppDetailInfoResponse.  # noqa: E501
        :type desc: str
        """
        if self.local_vars_configuration.client_side_validation and desc is None:  # noqa: E501
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def dev_status(self):
        """Gets the dev_status of this V1AppDetailInfoResponse.  # noqa: E501

        开发状态  # noqa: E501

        :return: The dev_status of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._dev_status

    @dev_status.setter
    def dev_status(self, dev_status):
        """Sets the dev_status of this V1AppDetailInfoResponse.

        开发状态  # noqa: E501

        :param dev_status: The dev_status of this V1AppDetailInfoResponse.  # noqa: E501
        :type dev_status: str
        """
        if self.local_vars_configuration.client_side_validation and dev_status is None:  # noqa: E501
            raise ValueError("Invalid value for `dev_status`, must not be `None`")  # noqa: E501

        self._dev_status = dev_status

    @property
    def download_count(self):
        """Gets the download_count of this V1AppDetailInfoResponse.  # noqa: E501

        下载次数  # noqa: E501

        :return: The download_count of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._download_count

    @download_count.setter
    def download_count(self, download_count):
        """Sets the download_count of this V1AppDetailInfoResponse.

        下载次数  # noqa: E501

        :param download_count: The download_count of this V1AppDetailInfoResponse.  # noqa: E501
        :type download_count: int
        """
        if self.local_vars_configuration.client_side_validation and download_count is None:  # noqa: E501
            raise ValueError("Invalid value for `download_count`, must not be `None`")  # noqa: E501

        self._download_count = download_count

    @property
    def entrance(self):
        """Gets the entrance of this V1AppDetailInfoResponse.  # noqa: E501

        体验入口  # noqa: E501

        :return: The entrance of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._entrance

    @entrance.setter
    def entrance(self, entrance):
        """Sets the entrance of this V1AppDetailInfoResponse.

        体验入口  # noqa: E501

        :param entrance: The entrance of this V1AppDetailInfoResponse.  # noqa: E501
        :type entrance: str
        """
        if self.local_vars_configuration.client_side_validation and entrance is None:  # noqa: E501
            raise ValueError("Invalid value for `entrance`, must not be `None`")  # noqa: E501

        self._entrance = entrance

    @property
    def install_count(self):
        """Gets the install_count of this V1AppDetailInfoResponse.  # noqa: E501

        安装次数  # noqa: E501

        :return: The install_count of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._install_count

    @install_count.setter
    def install_count(self, install_count):
        """Sets the install_count of this V1AppDetailInfoResponse.

        安装次数  # noqa: E501

        :param install_count: The install_count of this V1AppDetailInfoResponse.  # noqa: E501
        :type install_count: int
        """
        if self.local_vars_configuration.client_side_validation and install_count is None:  # noqa: E501
            raise ValueError("Invalid value for `install_count`, must not be `None`")  # noqa: E501

        self._install_count = install_count

    @property
    def introduction(self):
        """Gets the introduction of this V1AppDetailInfoResponse.  # noqa: E501

        应用介绍  # noqa: E501

        :return: The introduction of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._introduction

    @introduction.setter
    def introduction(self, introduction):
        """Sets the introduction of this V1AppDetailInfoResponse.

        应用介绍  # noqa: E501

        :param introduction: The introduction of this V1AppDetailInfoResponse.  # noqa: E501
        :type introduction: str
        """
        if self.local_vars_configuration.client_side_validation and introduction is None:  # noqa: E501
            raise ValueError("Invalid value for `introduction`, must not be `None`")  # noqa: E501

        self._introduction = introduction

    @property
    def introduction_html(self):
        """Gets the introduction_html of this V1AppDetailInfoResponse.  # noqa: E501

        应用介绍  # noqa: E501

        :return: The introduction_html of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._introduction_html

    @introduction_html.setter
    def introduction_html(self, introduction_html):
        """Sets the introduction_html of this V1AppDetailInfoResponse.

        应用介绍  # noqa: E501

        :param introduction_html: The introduction_html of this V1AppDetailInfoResponse.  # noqa: E501
        :type introduction_html: str
        """
        if self.local_vars_configuration.client_side_validation and introduction_html is None:  # noqa: E501
            raise ValueError("Invalid value for `introduction_html`, must not be `None`")  # noqa: E501

        self._introduction_html = introduction_html

    @property
    def is_official(self):
        """Gets the is_official of this V1AppDetailInfoResponse.  # noqa: E501

        是否是官方应用  # noqa: E501

        :return: The is_official of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_official

    @is_official.setter
    def is_official(self, is_official):
        """Sets the is_official of this V1AppDetailInfoResponse.

        是否是官方应用  # noqa: E501

        :param is_official: The is_official of this V1AppDetailInfoResponse.  # noqa: E501
        :type is_official: bool
        """
        if self.local_vars_configuration.client_side_validation and is_official is None:  # noqa: E501
            raise ValueError("Invalid value for `is_official`, must not be `None`")  # noqa: E501

        self._is_official = is_official

    @property
    def logo(self):
        """Gets the logo of this V1AppDetailInfoResponse.  # noqa: E501

        Logo  # noqa: E501

        :return: The logo of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this V1AppDetailInfoResponse.

        Logo  # noqa: E501

        :param logo: The logo of this V1AppDetailInfoResponse.  # noqa: E501
        :type logo: str
        """
        if self.local_vars_configuration.client_side_validation and logo is None:  # noqa: E501
            raise ValueError("Invalid value for `logo`, must not be `None`")  # noqa: E501

        self._logo = logo

    @property
    def market_id(self):
        """Gets the market_id of this V1AppDetailInfoResponse.  # noqa: E501

        商店 ID  # noqa: E501

        :return: The market_id of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._market_id

    @market_id.setter
    def market_id(self, market_id):
        """Sets the market_id of this V1AppDetailInfoResponse.

        商店 ID  # noqa: E501

        :param market_id: The market_id of this V1AppDetailInfoResponse.  # noqa: E501
        :type market_id: str
        """
        if self.local_vars_configuration.client_side_validation and market_id is None:  # noqa: E501
            raise ValueError("Invalid value for `market_id`, must not be `None`")  # noqa: E501

        self._market_id = market_id

    @property
    def market_name(self):
        """Gets the market_name of this V1AppDetailInfoResponse.  # noqa: E501

        商店名称  # noqa: E501

        :return: The market_name of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._market_name

    @market_name.setter
    def market_name(self, market_name):
        """Sets the market_name of this V1AppDetailInfoResponse.

        商店名称  # noqa: E501

        :param market_name: The market_name of this V1AppDetailInfoResponse.  # noqa: E501
        :type market_name: str
        """
        if self.local_vars_configuration.client_side_validation and market_name is None:  # noqa: E501
            raise ValueError("Invalid value for `market_name`, must not be `None`")  # noqa: E501

        self._market_name = market_name

    @property
    def market_url(self):
        """Gets the market_url of this V1AppDetailInfoResponse.  # noqa: E501

        商店 URL  # noqa: E501

        :return: The market_url of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._market_url

    @market_url.setter
    def market_url(self, market_url):
        """Sets the market_url of this V1AppDetailInfoResponse.

        商店 URL  # noqa: E501

        :param market_url: The market_url of this V1AppDetailInfoResponse.  # noqa: E501
        :type market_url: str
        """
        if self.local_vars_configuration.client_side_validation and market_url is None:  # noqa: E501
            raise ValueError("Invalid value for `market_url`, must not be `None`")  # noqa: E501

        self._market_url = market_url

    @property
    def name(self):
        """Gets the name of this V1AppDetailInfoResponse.  # noqa: E501

        应用名称  # noqa: E501

        :return: The name of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1AppDetailInfoResponse.

        应用名称  # noqa: E501

        :param name: The name of this V1AppDetailInfoResponse.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this V1AppDetailInfoResponse.  # noqa: E501

        组织机构 ID  # noqa: E501

        :return: The org_id of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this V1AppDetailInfoResponse.

        组织机构 ID  # noqa: E501

        :param org_id: The org_id of this V1AppDetailInfoResponse.  # noqa: E501
        :type org_id: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this V1AppDetailInfoResponse.  # noqa: E501

        组织机构名称  # noqa: E501

        :return: The org_name of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this V1AppDetailInfoResponse.

        组织机构名称  # noqa: E501

        :param org_name: The org_name of this V1AppDetailInfoResponse.  # noqa: E501
        :type org_name: str
        """
        if self.local_vars_configuration.client_side_validation and org_name is None:  # noqa: E501
            raise ValueError("Invalid value for `org_name`, must not be `None`")  # noqa: E501

        self._org_name = org_name

    @property
    def publish_type(self):
        """Gets the publish_type of this V1AppDetailInfoResponse.  # noqa: E501

        发布类型. private: 私有; public: 公有  # noqa: E501

        :return: The publish_type of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._publish_type

    @publish_type.setter
    def publish_type(self, publish_type):
        """Sets the publish_type of this V1AppDetailInfoResponse.

        发布类型. private: 私有; public: 公有  # noqa: E501

        :param publish_type: The publish_type of this V1AppDetailInfoResponse.  # noqa: E501
        :type publish_type: str
        """
        if self.local_vars_configuration.client_side_validation and publish_type is None:  # noqa: E501
            raise ValueError("Invalid value for `publish_type`, must not be `None`")  # noqa: E501

        self._publish_type = publish_type

    @property
    def scenario(self):
        """Gets the scenario of this V1AppDetailInfoResponse.  # noqa: E501

        应用场景  # noqa: E501

        :return: The scenario of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._scenario

    @scenario.setter
    def scenario(self, scenario):
        """Sets the scenario of this V1AppDetailInfoResponse.

        应用场景  # noqa: E501

        :param scenario: The scenario of this V1AppDetailInfoResponse.  # noqa: E501
        :type scenario: str
        """
        if self.local_vars_configuration.client_side_validation and scenario is None:  # noqa: E501
            raise ValueError("Invalid value for `scenario`, must not be `None`")  # noqa: E501

        self._scenario = scenario

    @property
    def show_count(self):
        """Gets the show_count of this V1AppDetailInfoResponse.  # noqa: E501

        访问次数  # noqa: E501

        :return: The show_count of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._show_count

    @show_count.setter
    def show_count(self, show_count):
        """Sets the show_count of this V1AppDetailInfoResponse.

        访问次数  # noqa: E501

        :param show_count: The show_count of this V1AppDetailInfoResponse.  # noqa: E501
        :type show_count: int
        """
        if self.local_vars_configuration.client_side_validation and show_count is None:  # noqa: E501
            raise ValueError("Invalid value for `show_count`, must not be `None`")  # noqa: E501

        self._show_count = show_count

    @property
    def start_count(self):
        """Gets the start_count of this V1AppDetailInfoResponse.  # noqa: E501


        :return: The start_count of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._start_count

    @start_count.setter
    def start_count(self, start_count):
        """Sets the start_count of this V1AppDetailInfoResponse.


        :param start_count: The start_count of this V1AppDetailInfoResponse.  # noqa: E501
        :type start_count: int
        """
        if self.local_vars_configuration.client_side_validation and start_count is None:  # noqa: E501
            raise ValueError("Invalid value for `start_count`, must not be `None`")  # noqa: E501

        self._start_count = start_count

    @property
    def status(self):
        """Gets the status of this V1AppDetailInfoResponse.  # noqa: E501

        状态  # noqa: E501

        :return: The status of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1AppDetailInfoResponse.

        状态  # noqa: E501

        :param status: The status of this V1AppDetailInfoResponse.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this V1AppDetailInfoResponse.  # noqa: E501

        标签列表  # noqa: E501

        :return: The tags of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this V1AppDetailInfoResponse.

        标签列表  # noqa: E501

        :param tags: The tags of this V1AppDetailInfoResponse.  # noqa: E501
        :type tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def up_shelves_time(self):
        """Gets the up_shelves_time of this V1AppDetailInfoResponse.  # noqa: E501

        上架时间  # noqa: E501

        :return: The up_shelves_time of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._up_shelves_time

    @up_shelves_time.setter
    def up_shelves_time(self, up_shelves_time):
        """Sets the up_shelves_time of this V1AppDetailInfoResponse.

        上架时间  # noqa: E501

        :param up_shelves_time: The up_shelves_time of this V1AppDetailInfoResponse.  # noqa: E501
        :type up_shelves_time: datetime
        """
        if self.local_vars_configuration.client_side_validation and up_shelves_time is None:  # noqa: E501
            raise ValueError("Invalid value for `up_shelves_time`, must not be `None`")  # noqa: E501

        self._up_shelves_time = up_shelves_time

    @property
    def update_time(self):
        """Gets the update_time of this V1AppDetailInfoResponse.  # noqa: E501


        :return: The update_time of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this V1AppDetailInfoResponse.


        :param update_time: The update_time of this V1AppDetailInfoResponse.  # noqa: E501
        :type update_time: datetime
        """
        if self.local_vars_configuration.client_side_validation and update_time is None:  # noqa: E501
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    @property
    def user(self):
        """Gets the user of this V1AppDetailInfoResponse.  # noqa: E501


        :return: The user of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: V1SaaSAppUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V1AppDetailInfoResponse.


        :param user: The user of this V1AppDetailInfoResponse.  # noqa: E501
        :type user: V1SaaSAppUser
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def versions(self):
        """Gets the versions of this V1AppDetailInfoResponse.  # noqa: E501

        版本列表  # noqa: E501

        :return: The versions of this V1AppDetailInfoResponse.  # noqa: E501
        :rtype: list[V1AppVersionBase]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this V1AppDetailInfoResponse.

        版本列表  # noqa: E501

        :param versions: The versions of this V1AppDetailInfoResponse.  # noqa: E501
        :type versions: list[V1AppVersionBase]
        """
        if self.local_vars_configuration.client_side_validation and versions is None:  # noqa: E501
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AppDetailInfoResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1AppDetailInfoResponse):
            return True

        return self.to_dict() != other.to_dict()
